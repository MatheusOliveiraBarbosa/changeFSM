package br.com.changefsm.generatorpdf;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Date;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import br.com.changefsm.models.UpdateSM;

public class GeneratorPDF {

	private final Logger log = LogManager.getLogger(GeneratorPDF.class);

	private final Font TITLE_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 32, Font.BOLD);
	private final Font SUBTITLE_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private final Font INFO_CREATE_REPORT_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
	private final Font FOCUS_FONT = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLDITALIC,
			new BaseColor(68, 171, 125)); //GREEN
	private final Font FOCUS_NAME_SM_FONT = new Font(Font.FontFamily.HELVETICA, 20, Font.BOLDITALIC,
			new BaseColor(37, 67, 105)); //BLUE
	private final Font TITLE_COLUMN_FONT = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD,
			new BaseColor(240, 240, 240)); //WHITE
	private final Font VALUE_COLUMN_FONT = new Font(Font.FontFamily.HELVETICA, 10, Font.BOLD,
			new BaseColor(10,10,10));  //BLACK
	private final Font IDENTIFIER_CODE_CHANGE_FONT = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD);

	private final String FILE = "updatesPDF.pdf";
	private final String TITLE_UPDATE_ANCHOR = "State Machine Update";
	private int indexChapt = 1;

	private final String TITLE_TYPE_UPDATESM = "Type Update State Machine: ";
	private final String TITLE_SM_NAME = "State Machine's name: ";
	private final String TITLE_CLASS_NAME = "Class Java: ";
	private final String TITLE_CODE_CHANGE = "Code Change: ";

	private final String IMAGE = "image/LOGO-ChangeFSM.jpg";

	private PdfWriter writer;
	private Document document;
	
	public void openPdfWriter(String path) throws FileNotFoundException, DocumentException {
		document = new Document();
		writer = PdfWriter.getInstance(document, new FileOutputStream(path + FILE));
		document.open();
		addMetaData(document);
		addTitlePage(document);
	}

	public void generatePDFUpdates(ArrayList<UpdateSM> updates) throws DocumentException{
		addContent(document, updates);	
	}
	
	public void closePdfWriter(){
		document.close();
		log.info("PDF WAS GENERATED!");
	}

	/**
	 * iText allows to add metadata to the PDF which can be viewed in your Adobe
	 * Reader under File->Properties
	 * 
	 * @param document
	 */
	private void addMetaData(Document document) {
		document.addTitle("Update State Machine Report");
		document.addSubject("Master thesis");
		document.addKeywords("Java, Information Retrieval, State Machine");
		document.addAuthor("Matheus de Oliveira Barbosa");
		document.addCreator("Matheus de Oliveira Barbosa");
	}

	/**
	 * 
	 * @param document
	 * @throws DocumentException
	 */
	private void addTitlePage(Document document) throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		Paragraph title = new Paragraph("State Machines Updating Report", TITLE_FONT);
		title.setAlignment(Element.ALIGN_CENTER);
		preface.add(title);
		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				INFO_CREATE_REPORT_FONT));
		addEmptyLine(preface, 1);

		String descriptionReport = "This report contains the updates to perform in your State Machines,"
				+ " after analysis and classify based on source code changes that happened on project.";
		Paragraph subtitle = new Paragraph(descriptionReport, SUBTITLE_FONT);
		subtitle.setAlignment(Element.ALIGN_JUSTIFIED);
		preface.add(subtitle);

		addEmptyLine(preface, 2);

		document.add(preface);

		PdfContentByte canvas = writer.getDirectContentUnder();
		Image image;
		try {
			image = Image.getInstance(IMAGE);
			image.scaleAbsolute(PageSize.A4);
			image.setAbsolutePosition(50, 300);
			image.scaleToFit(500, 500);
			canvas.addImage(image);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		// Start a new page
		// document.newPage();
	}

	private void addContent(Document document, ArrayList<UpdateSM> updates) throws DocumentException {
		Anchor anchor = new Anchor(TITLE_UPDATE_ANCHOR, TITLE_FONT);
		anchor.setName(TITLE_UPDATE_ANCHOR);
		Chapter catPart = new Chapter(new Paragraph(anchor), indexChapt);
		//Configuration to create a space between chapter and section
		Paragraph emptyP = new Paragraph();
		addEmptyLine(emptyP, 2);
		catPart.add(emptyP);
		//Get = 0, because each list of updates is only one state machine
		System.out.println(updates.get(0).getStateMachine().getName());
		String nameStateMachine = updates.get(0).getStateMachine().getName().replaceAll("[\\W_]|(xml)", " ").toUpperCase();
		Paragraph titleSection = new Paragraph("State Machine's NAME: ", SUBTITLE_FONT);
		Paragraph paragNameSM =  new Paragraph(nameStateMachine, FOCUS_NAME_SM_FONT);
		paragNameSM.setAlignment(Element.ALIGN_CENTER);
		titleSection.add(paragNameSM);
		Section sec = catPart.addSection(titleSection);
		for (UpdateSM update : updates) {

			Paragraph paragraphEmpty = new Paragraph();
			addEmptyLine(paragraphEmpty, 2);
			sec.add(paragraphEmpty);

			createTable(sec, update);
		}
		document.add(catPart);
		indexChapt++;
	}

	private void createTable(Section catPart, UpdateSM update) throws BadElementException {
		PdfPTable table = new PdfPTable(2);
 
		table.addCell(createCellColumn(TITLE_TYPE_UPDATESM));
		table.addCell(createValueColumn(update.getUpdateSMType().name()));

		table.addCell(createCellColumn(TITLE_SM_NAME));
		table.addCell(createValueColumn(update.getStateMachine().getName()));

		table.addCell(createCellColumn(TITLE_CLASS_NAME));
		table.addCell(createValueColumn(update.getClassJava().getName()));

		PdfPCell codeChange = createCellColumn(TITLE_CODE_CHANGE);
		codeChange.setColspan(2);
		table.addCell(codeChange);

		table.addCell(createValueCodeChange(update));

		catPart.add(table);

	}

	private PdfPCell createValueCodeChange(UpdateSM update) {
		PdfPCell cell = new PdfPCell();
		cell.setColspan(2);
		cell.setPadding(5);
		
		/*CLASS'S OR METHOD'S NAME*/
		String nameClassOrMethod = update.getCodeChange().getRootEntity().getUniqueName();
		int indexLastPoint = nameClassOrMethod.lastIndexOf(".");
		nameClassOrMethod = nameClassOrMethod.substring(indexLastPoint + 1); // +1 for ignore last point(.)
		if(nameClassOrMethod.contains("(")) {
			Paragraph paragMethod = new Paragraph("Method:");
			paragMethod.setFont(IDENTIFIER_CODE_CHANGE_FONT);
			cell.addElement(paragMethod);
			cell.addElement(new Phrase("      " + nameClassOrMethod));
		}else {
			Paragraph paragClass = new Paragraph("Class:");
			paragClass.setFont(IDENTIFIER_CODE_CHANGE_FONT);
			cell.addElement(paragClass);
			cell.addElement(new Phrase("      " + nameClassOrMethod));
		}
		
		/*PARENT ELEMENT*/
		String nameElemParent = update.getCodeChange().getParentEntity().toString();
		Paragraph paragParent = new Paragraph("Parent Element:");
		paragParent.setFont(IDENTIFIER_CODE_CHANGE_FONT);
		cell.addElement(paragParent);
		cell.addElement(new Phrase("      " + nameElemParent)); // WHITE SPACE FOR BETTER VISUALIZATION
		
		/*CHANGED ELEMENT*/
		Paragraph paragChangedElem = new Paragraph("Changed Element:");
		paragChangedElem.setFont(IDENTIFIER_CODE_CHANGE_FONT);
		cell.addElement(paragChangedElem);
		Phrase phrase = new Phrase("      "+update.getCodeChange().getChangedEntity().getUniqueName());
		Phrase phraseChangedEntity = new Phrase("      "+update.getCodeChange().getChangedEntity());
		Phrase phraseChangeLabel = new Phrase("      Change Type: "+update.getCodeChange().getChangeType());
		phrase.setFont(FOCUS_FONT);
		cell.addElement(phrase);
		cell.addElement(phraseChangedEntity);
		cell.addElement(phraseChangeLabel);

		return cell;

	}

	private PdfPCell createValueColumn(String value ) {
		Paragraph valueCell = new Paragraph(value);
		valueCell.setAlignment(Element.ALIGN_CENTER);
		valueCell.setFont(VALUE_COLUMN_FONT);
		PdfPCell cell = new PdfPCell();
		cell.setPadding(5);
		cell.addElement(valueCell);
		return cell;
	}

	private PdfPCell createCellColumn(String title) {
		Paragraph titleCell = new Paragraph(title);
		titleCell.setFont(TITLE_COLUMN_FONT);
		PdfPCell cell = new PdfPCell();
		cell.setBackgroundColor(new BaseColor(90, 90, 90));
		cell.setPadding(5);
		cell.addElement(titleCell);
		return cell;
	}

	private void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
}
