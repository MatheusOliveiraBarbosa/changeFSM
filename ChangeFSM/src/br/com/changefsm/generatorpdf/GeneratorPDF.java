package br.com.changefsm.generatorpdf;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import br.com.changefsm.models.UpdateSM;

public class GeneratorPDF {

	private final Font TITLE_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private final Font SUBTITLE_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
	private final Font FOCUS_FONT = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLDITALIC,
			new BaseColor(68, 171, 125));
	private final Font TITLE_COLUMN = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD,
			new BaseColor(250, 250, 250));
	private final Font VALUE_COLUMN = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	private final String FILE = "updatesPDF.pdf";
	private final String TITLE_UPDATE_ANCHOR = "State Machine Update";

	private final String TITLE_TYPE_UPDATESM = "Type Update State Machine";
	private final String TITLE_SM_NAME = "State Machine's name";
	private final String TITLE_CLASS_NAME = "Class Java";
	private final String TITLE_CODE_CHANGE = "Code Change";

	public void generatePDFUpdates(ArrayList<UpdateSM> updates) throws FileNotFoundException, DocumentException {
		Document document = new Document();
		PdfWriter.getInstance(document, new FileOutputStream(FILE));
		document.open();
		addMetaData(document);
		addTitlePage(document);
		addContent(document, updates);
		document.close();
	}

	/**
	 * iText allows to add metadata to the PDF which can be viewed in your Adobe
	 * Reader under File->Properties
	 * 
	 * @param document
	 */
	private void addMetaData(Document document) {
		document.addTitle("Update State Machine Report");
		document.addSubject("Master thesis");
		document.addKeywords("Java, Information Retrieval, State Machine");
		document.addAuthor("Matheus de Oliveira Barbosa");
		document.addCreator("Matheus de Oliveira Barbosa");
	}

	/**
	 * 
	 * @param document
	 * @throws DocumentException
	 */
	private void addTitlePage(Document document) throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Update State Machines Report", TITLE_FONT));
		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				SUBTITLE_FONT));
		addEmptyLine(preface, 1);

		preface.add(new Paragraph("This document describes the possibles updates to realize in your State Machines.",
				SUBTITLE_FONT));

		addEmptyLine(preface, 2);

		preface.add(new Paragraph("The next items are the possibles state machines update.", SUBTITLE_FONT));
		document.add(preface);
		// Start a new page
//		document.newPage();
	}

	private void addContent(Document document, ArrayList<UpdateSM> updates) throws DocumentException {
		int indexChapter = 0;
		for (UpdateSM update : updates) {
			indexChapter++;
			Anchor anchor = new Anchor(TITLE_UPDATE_ANCHOR, TITLE_FONT);
			anchor.setName(TITLE_UPDATE_ANCHOR);

			// Second parameter is the number of the chapter
			Chapter catPart = new Chapter(new Paragraph(anchor), indexChapter);

			Paragraph paragraphEmpty = new Paragraph();
			addEmptyLine(paragraphEmpty, 2);
			catPart.add(paragraphEmpty);

			createTable(catPart, update);

			// now add all this to the document
			document.add(catPart);
		}
	}

	private void createTable(Section catPart, UpdateSM update) throws BadElementException {
		PdfPTable table = new PdfPTable(2);

		table.addCell(createCellColumn(TITLE_TYPE_UPDATESM));
		table.addCell(createValueColumn(update.getUpdateSMType().name()));

		table.addCell(createCellColumn(TITLE_SM_NAME));
		table.addCell(createValueColumn(update.getStateMachine().getName()));

		table.addCell(createCellColumn(TITLE_CLASS_NAME));
		table.addCell(createValueColumn(update.getClassJava().getName()));

		PdfPCell codeChange = createCellColumn(TITLE_CODE_CHANGE);
		codeChange.setColspan(2);
		table.addCell(codeChange);

		table.addCell(createValueCodeChange(update));

		catPart.add(table);

	}

	private PdfPCell createValueCodeChange(UpdateSM update) {
		PdfPCell cell = new PdfPCell();
		cell.setPadding(5);
		cell.setColspan(2);
		cell.addElement(new Phrase("Root (Method/Class): "+update.getCodeChange().getRootEntity().toString()));
		cell.addElement(new Phrase("Parent: "+update.getCodeChange().getParentEntity().toString()));
		Phrase phrase = new Phrase(update.getCodeChange().getChangedEntity().toString());
		phrase.setFont(FOCUS_FONT);
		cell.addElement(phrase);

		return cell;

	}

	private PdfPCell createValueColumn(String value) {
		Phrase valueCell = new Phrase(value);
		valueCell.setFont(VALUE_COLUMN);
		PdfPCell cell = new PdfPCell();
		cell.addElement(valueCell);
		return cell;
	}

	private PdfPCell createCellColumn(String title) {
		Phrase titleCell = new Phrase(title);
		titleCell.setFont(TITLE_COLUMN);
		PdfPCell cell = new PdfPCell();
		cell.addElement(titleCell);
		cell.setBackgroundColor(new BaseColor(90, 90, 90));
		cell.setPadding(5);
		return cell;
	}

	private void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
}
