"ID", "Change", "Type Change", "Label Change", "Changed Entity", "Parent Entity", "Root Entity", "Class Name"
1, "Insert: winnerState = new WinnerState(this);","STATEMENT_INSERT","STATEMENT_INSERT","ASSIGNMENT: winnerState = new WinnerState(this);","METHOD: StateDesignPattern.GumballMachine.GumballMachine(int)","StateDesignPattern.GumballMachine.GumballMachine(int)","GumballMachine.java" 
2, "Move: soldOutState = new SoldOutState(this);","STATEMENT_ORDERING_CHANGE","STATEMENT_ORDERING_CHANGE","ASSIGNMENT: soldOutState = new SoldOutState(this);","METHOD: StateDesignPattern.GumballMachine.GumballMachine(int)","StateDesignPattern.GumballMachine.GumballMachine(int)","GumballMachine.java" 
3, "Insert: StateDesignPattern.GumballMachine.getWinnerState()","ADDITIONAL_FUNCTIONALITY","ADDITIONAL_FUNCTIONALITY","METHOD: StateDesignPattern.GumballMachine.getWinnerState()","CLASS: StateDesignPattern.GumballMachine","StateDesignPattern.GumballMachine","GumballMachine.java" 
4, "Insert: StateDesignPattern.GumballMachine.winnerState : State","ADDITIONAL_OBJECT_STATE","ADDITIONAL_OBJECT_STATE","FIELD: StateDesignPattern.GumballMachine.winnerState : State","CLASS: StateDesignPattern.GumballMachine","StateDesignPattern.GumballMachine","GumballMachine.java" 
5, "Insert: (i < 20)","STATEMENT_INSERT","STATEMENT_INSERT","FOR_STATEMENT: (i < 20)","METHOD: StateDesignPattern.GumballSimulator.main(String[])","StateDesignPattern.GumballSimulator.main(String[])","GumballSimulator.java" 
6, "Insert: System.out.println(gumballMachine.getCount());","STATEMENT_INSERT","STATEMENT_INSERT","METHOD_INVOCATION: System.out.println(gumballMachine.getCount());","FOR_STATEMENT: (i < 20)","StateDesignPattern.GumballSimulator.main(String[])","GumballSimulator.java" 
7, "Insert: System.out.println();","STATEMENT_INSERT","STATEMENT_INSERT","METHOD_INVOCATION: System.out.println();","FOR_STATEMENT: (i < 20)","StateDesignPattern.GumballSimulator.main(String[])","GumballSimulator.java" 
8, "Insert: int i = 0;","STATEMENT_INSERT","STATEMENT_INSERT","VARIABLE_DECLARATION_STATEMENT: int i = 0;","FOR_INIT: int i = 0;","StateDesignPattern.GumballSimulator.main(String[])","GumballSimulator.java" 
9, "Insert: i ++;","STATEMENT_INSERT","STATEMENT_INSERT","POSTFIX_EXPRESSION: i ++;","FOR_INCR: i ++","StateDesignPattern.GumballSimulator.main(String[])","GumballSimulator.java" 
10, "Delete: gumballMachine.insertQuater();","STATEMENT_DELETE","STATEMENT_DELETE","METHOD_INVOCATION: gumballMachine.insertQuater();","METHOD: StateDesignPattern.GumballSimulator.main(String[])","StateDesignPattern.GumballSimulator.main(String[])","GumballSimulator.java" 
11, "Delete: gumballMachine.turnCrank();","STATEMENT_DELETE","STATEMENT_DELETE","METHOD_INVOCATION: gumballMachine.turnCrank();","METHOD: StateDesignPattern.GumballSimulator.main(String[])","StateDesignPattern.GumballSimulator.main(String[])","GumballSimulator.java" 
12, "Delete: gumballMachine.insertQuater();","STATEMENT_DELETE","STATEMENT_DELETE","METHOD_INVOCATION: gumballMachine.insertQuater();","METHOD: StateDesignPattern.GumballSimulator.main(String[])","StateDesignPattern.GumballSimulator.main(String[])","GumballSimulator.java" 
13, "Delete: gumballMachine.ejectQuarter();","STATEMENT_DELETE","STATEMENT_DELETE","METHOD_INVOCATION: gumballMachine.ejectQuarter();","METHOD: StateDesignPattern.GumballSimulator.main(String[])","StateDesignPattern.GumballSimulator.main(String[])","GumballSimulator.java" 
14, "Delete: gumballMachine.turnCrank();","STATEMENT_DELETE","STATEMENT_DELETE","METHOD_INVOCATION: gumballMachine.turnCrank();","METHOD: StateDesignPattern.GumballSimulator.main(String[])","StateDesignPattern.GumballSimulator.main(String[])","GumballSimulator.java" 
15, "Move: gumballMachine.insertQuater();","STATEMENT_PARENT_CHANGE","STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: gumballMachine.insertQuater();","METHOD: StateDesignPattern.GumballSimulator.main(String[])","StateDesignPattern.GumballSimulator.main(String[])","GumballSimulator.java" 
16, "Move: gumballMachine.turnCrank();","STATEMENT_PARENT_CHANGE","STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: gumballMachine.turnCrank();","METHOD: StateDesignPattern.GumballSimulator.main(String[])","StateDesignPattern.GumballSimulator.main(String[])","GumballSimulator.java" 
17, "Update: GumballMachine gumballMachine = new GumballMachine(5);","STATEMENT_UPDATE","STATEMENT_UPDATE","VARIABLE_DECLARATION_STATEMENT: GumballMachine gumballMachine = new GumballMachine(5);","METHOD: StateDesignPattern.GumballSimulator.main(String[])","StateDesignPattern.GumballSimulator.main(String[])","GumballSimulator.java" 
18, "Insert: ((random.nextInt(10) == 0) && (gumballMachine.getCount() > 1))","STATEMENT_INSERT","STATEMENT_INSERT","IF_STATEMENT: ((random.nextInt(10) == 0) && (gumballMachine.getCount() > 1))","METHOD: StateDesignPattern.HasQuarterState.turnCrank()","StateDesignPattern.HasQuarterState.turnCrank()","HasQuarterState.java" 
19, "Insert: ((random.nextInt(10) == 0) && (gumballMachine.getCount() > 1))","ALTERNATIVE_PART_INSERT","ALTERNATIVE_PART_INSERT","ELSE_STATEMENT: ((random.nextInt(10) == 0) && (gumballMachine.getCount() > 1))","IF_STATEMENT: ((random.nextInt(10) == 0) && (gumballMachine.getCount() > 1))","StateDesignPattern.HasQuarterState.turnCrank()","HasQuarterState.java" 
20, "Insert: gumballMachine.setState(gumballMachine.getWinnerState());","STATEMENT_INSERT","STATEMENT_INSERT","METHOD_INVOCATION: gumballMachine.setState(gumballMachine.getWinnerState());","THEN_STATEMENT: ((random.nextInt(10) == 0) && (gumballMachine.getCount() > 1))","StateDesignPattern.HasQuarterState.turnCrank()","HasQuarterState.java" 
21, "Move: gumballMachine.setState(gumballMachine.getSoldState());","STATEMENT_PARENT_CHANGE","STATEMENT_PARENT_CHANGE","METHOD_INVOCATION: gumballMachine.setState(gumballMachine.getSoldState());","METHOD: StateDesignPattern.HasQuarterState.turnCrank()","StateDesignPattern.HasQuarterState.turnCrank()","HasQuarterState.java" 
22, "Insert: StateDesignPattern.HasQuarterState.random : Random","ADDITIONAL_OBJECT_STATE","ADDITIONAL_OBJECT_STATE","FIELD: StateDesignPattern.HasQuarterState.random : Random","CLASS: StateDesignPattern.HasQuarterState","StateDesignPattern.HasQuarterState","HasQuarterState.java" 
